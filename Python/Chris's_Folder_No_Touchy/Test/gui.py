
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import *
from tkinter import ttk
from ttkthemes import ThemedStyle
import ctypes
import numpy as np 
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, 
NavigationToolbar2Tk)

ctypes.windll.shcore.SetProcessDpiAwareness(1)


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

# a subclass of Canvas for dealing with resizing of windows
class ResizingCanvas(Canvas):
    def __init__(self,parent,**kwargs):
        Canvas.__init__(self,parent,**kwargs)
        self.bind("<Configure>", self.on_resize)
        self.height = self.winfo_reqheight()
        self.width = self.winfo_reqwidth()

    def on_resize(self,event):
        # determine the ratio of old width/height to new width/height
        wscale = float(event.width)/self.width
        hscale = float(event.height)/self.height
        self.width = event.width
        self.height = event.height
        # resize the canvas 
        self.config(width=self.width, height=self.height)
        # rescale all the objects tagged with the "all" tag
        self.scale("all",0,0,wscale,hscale)
        
window = Tk() 

style = ThemedStyle(window)
style.set_theme("black")
width, height = window.winfo_screenwidth(), window.winfo_screenheight()
print('%dx%d' % (width,height))
window.geometry('%dx%d' % (width,height))

# create a notebook
notebook = ttk.Notebook(window)
notebook.pack(expand = 1, fill ="both")

# create frames
control = ttk.Frame(notebook)
control.pack(expand = 1, fill ="both")
notebook.add(control, text='Controls')
canvas = ResizingCanvas(
    control,
    bg = "#626262",
    height = 1839,
    width = 2736,
    bd = 0,
    highlightthickness = 0,
    borderwidth=2,
    relief = "raised"
)

canvas.pack(expand = 1, fill ="both")


def defineCircle(p1, p2, p3):
    """
    Returns the center and radius of the circle passing the given 3 points.
    In case the 3 points form a line, returns (None, infinity).
    """
    temp = p2[0] * p2[0] + p2[1] * p2[1]
    bc = (p1[0] * p1[0] + p1[1] * p1[1] - temp) / 2
    cd = (temp - p3[0] * p3[0] - p3[1] * p3[1]) / 2
    det = (p1[0] - p2[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p2[1])

    if abs(det) < 1.0e-6:
        return (None, np.inf)

    # Center of circle
    cx = (bc*(p2[1] - p3[1]) - cd*(p1[1] - p2[1])) / det
    cy = ((p1[0] - p2[0]) * cd - (p2[0] - p3[0]) * bc) / det

    radius = np.sqrt((cx - p1[0])**2 + (cy - p1[1])**2)
    return ((cx, cy), radius)

def inCircle(cx, cy, radius, x, y):
    if pow((x - cx), 2) + pow((y - cy), 2) <= pow(radius, 2):
        return True
    return False
        
p = (0,0)
center, radius = defineCircle((0,1), (1,0), (0,-1))
print(inCircle(center[0], center[1], radius, p[0], p[1]))

figure, axes = plt.subplots() 
figure.set_facecolor("#424242",)
# change all spines
for axis in ['top','bottom','left','right']:
    axes.spines[axis].set_linewidth(2)

# increase tick width
axes.tick_params(width=1)
cc = plt.Circle(center, radius, fill=False)
plt.grid(True)
axes.set_xlim(-1.2, 1.2)
axes.set_ylim(-1.2, 1.2)
plt.plot(p[0], p[1],'ro', linewidth = 5) 
axes.set_aspect( 1 ) 
axes.add_artist( cc ) 
    
    
test = FigureCanvasTkAgg(figure, master=canvas)
test.get_tk_widget().place(
    relx=1464.5130615234375/2736,
    rely=116.35806274414062/1839,
    relwidth=1230/2736,
    relheight=1142/1839
)
test.draw()

"""
UX rectangles
"""
canvas.create_rectangle(
    1464.5130615234375,
    1278.018798828125,
    2694.99951171875,
    1639.447021484375,
    width=1,
    fill="#424242",
    outline="black")

canvas.create_rectangle(
    40.0,
    116.35806274414062,
    721.0739135742188,
    989.8941955566406,
    width=1,
    fill="#424242",
    outline="black")

canvas.create_rectangle(
    750.7725219726562,
    767.9468383789062,
    1431.846435546875,
    1639.44677734375,
    width=1,
    fill="#424242",
    outline="black"
)

canvas.create_rectangle(
    402.31610107421875,
    269.0741882324219,
    568.6248168945312,
    316.92523193359375,
    fill="#ffffff",
    outline="")

canvas.create_rectangle(
    402.31610107421875,
    354.5952453613281,
    568.6248168945312,
    402.4462890625,
    fill="#ffffff",
    outline="")

canvas.create_rectangle(
    402.31610107421875,
    439.09820556640625,
    568.6248168945312,
    488.9854736328125,
    fill="#ffffff",
    outline=""
)

canvas.create_rectangle(
    1113.087158203125,
    918.6267700195312,
    1282.36572265625,
    968.5140380859375,
    fill="#ffffff",
    outline="")

canvas.create_rectangle(
    1113.087158203125,
    1004.1476440429688,
    1282.36572265625,
    1051.9986877441406,
    fill="#ffffff",
    outline="")

canvas.create_rectangle(
    1113.087158203125,
    1089.668701171875,
    1282.36572265625,
    1138.537841796875,
    fill="#ffffff",
    outline="")

"""
UX Text
"""
canvas.create_text(
    1953.540283203125,
    1315.688720703125,
    anchor="nw",
    text="Data Recording",
    fill="#ffffff",
    font=("TkDefaultFont", 32 * -1)
)

canvas.create_text(
    967.5676879882812,
    787.2908935546875,
    anchor="nw",
    text="Positioning",
    fill="#ffffff",
    font=("TkDefaultFont", 32 * -1)
)

canvas.create_text(
    793.3386840820312,
    845.3230590820312,
    anchor="nw",
    text="Current Position:",
    fill="#ffffff",
    font=("TkDefaultFont", 24 * -1)
)

canvas.create_text(
    899.2613525390625,
    930.8441772460938,
    anchor="nw",
    text="x coordinate",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    899.2613525390625,
    1016.3651733398438,
    anchor="nw",
    text="y coordinate",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    899.2613525390625,
    1100.867919921875,
    anchor="nw",
    text="z coordinate",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    899.2613525390625,
    1290.236083984375,
    anchor="nw",
    text="x coordinate",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    899.2613525390625,
    1374.739013671875,
    anchor="nw",
    text="y coordinate",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    899.2613525390625,
    1460.260009765625,
    anchor="nw",
    text="z coordinate",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    793.3386840820312,
    1204.715087890625,
    anchor="nw",
    text="Desired Position:",
    fill="#ffffff",
    font=("TkDefaultFont", 24 * -1)
)

canvas.create_text(
    1936,
    40.0,
    anchor="nw",
    text="Position Projection ",
    fill="#ffffff",
    font=("TkDefaultFont", 32 * -1)
)

canvas.create_text(
    922,
    40.0,
    anchor="nw",
    text="Curvature Visualization",
    fill="#ffffff",
    font=("TkDefaultFont", 32 * -1)
)

"""
input box text
"""
canvas.create_text(
    232.0,
    140.0,
    anchor="nw",
    text="Channel Pressures",
    fill="#ffffff",
    font=("TkDefaultFont", 32 * -1)
)

canvas.create_text(
    81.57742309570312,
    195.77041625976562,
    anchor="nw",
    text="Current Pressures:",
    fill="#ffffff",
    font=("TkDefaultFont", 24 * -1)
)

canvas.create_text(
    186.5096893310547,
    281.29144287109375,
    anchor="nw",
    text="Channel 1",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    186.5096893310547,
    365.79437255859375,
    anchor="nw",
    text="Channel 2",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    186.5096893310547,
    451.31536865234375,
    anchor="nw",
    text="Channel 3",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    186.5096893310547,
    638.647216796875,
    anchor="nw",
    text="Channel 1",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    186.5096893310547,
    725.1863403320312,
    anchor="nw",
    text="Channel 2",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    186.5096893310547,
    810.7073364257812,
    anchor="nw",
    text="Channel 3 ",
    fill="#ffffff",
    font=("TkDefaultFont", 20 * -1)
)

canvas.create_text(
    81.57742309570312,
    556.1624145507812,
    anchor="nw",
    text="Desired Pressures:",
    fill="#ffffff",
    font=("TkDefaultFont", 24 * -1)
)

"""
Start of widgets 
"""

"""
position text boxs
"""
entry_1 = ttk.Entry(
)
entry_1.place(
    relx=1113/2736,
    rely=1298/1839,
    relwidth=169/2736,
    relheight=47/1839
)

entry_2 = ttk.Entry(
)
entry_2.place(
    relx=1113/2736,
    rely=1383/1839,
    relwidth=169/2736,
    relheight=47/1839
)

entry_3 = ttk.Entry(
)
entry_3.place(
    relx=1113/2736,
    rely=1470/1839,
    relwidth=169/2736,
    relheight=47/1839
)
"""
Pressure Entry Boxes
"""
entry_4 = ttk.Entry(
)
entry_4.place(
    relx=402/2736,
    rely=658/1839,
    relwidth=169/2736,
    relheight=47/1839
)

entry_5 = ttk.Entry(
)
entry_5.place(
    relx=402/2736,
    rely=742/1839,
    relwidth=169/2736,
    relheight=47/1839
)

entry_6 = ttk.Entry(
)
entry_6.place(
    relx=402/2736,
    rely=828/1839,
    relwidth=169/2736,
    relheight=47/1839
)

"""
Logging Buttons
"""
button_1 = ttk.Button(
    text ="Stop Logging",
    command=lambda: print("button_1 clicked"),
)
button_1.place(
    relx=1921/2736,
    rely=1439/1839,
    relwidth=314/2736,
    relheight=97/1839
)

button_2 = ttk.Button(
    text ="Clear Log File",
    command=lambda: print("button_2 clicked"),
)
button_2.place(
    relx=2281/2736,
    rely=1439/1839,
    relwidth=314/2736,
    relheight=97/1839
)

button_3 = ttk.Button(
    text ="Start Logging",
    command=lambda: print("button_3 clicked"),
)
button_3.place(
    relx=1565/2736,
    rely=1439/1839,
    relwidth=314/2736,
    relheight=97/1839
)

window.resizable(True, True)
window.mainloop()

